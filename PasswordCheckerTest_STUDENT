import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * STUDENT tests for the methods of PasswordChecker
 * @author Paul Abili
 *
 */
public class PasswordCheckerTest_STUDENT {
	String one, two, three, four, five, six, seven, eight;
	@Before
	public void setUp() throws Exception {
		one = "A";
		two = "PaulAbili1*";
		three = "Apai1@";
		four = "PAULABILI1@";
		five = "paulabili1@";
		six = "PaulAbili2";
		seven = "PaulAbili@";
		eight = "PPPPaul1@8";

	}

	@After
	public void tearDown() throws Exception {
		one = two = three = four = five = six = seven = eight = null;
	}

	/**
	 * Test if the password is less than 6 characters long.
	 * This test should throw a LengthException for second case.
	 */
	@Test
	public void testIsValidPasswordTooShort()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(one));
		} catch(LengthException e ) {
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}

	/**
	 * Test if the password has at least one uppercase alpha character
	 * This test should throw a NoUpperAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoUpperAlpha()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(five));
		} catch(NoUpperAlphaException e) {
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}

	/**
	 * Test if the password has at least one lowercase alpha character
	 * This test should throw a NoLowerAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoLowerAlpha()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(four));
		} catch(NoLowerAlphaException e) {
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}
	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsWeakPassword()
	{
		try {
			assertTrue(PasswordCheckerUtility.isWeakPassword(three));
		} catch(WeakPasswordException e) {                             
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}

	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsValidPasswordInvalidSequence()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(eight));
		} catch(InvalidSequenceException e) {
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}

	/**
	 * Test if the password has at least one digit
	 * One test should throw a NoDigitException
	 */
	@Test
	public void testIsValidPasswordNoDigit()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(seven));
		} catch(NoDigitException e) {
			assertTrue("Threw Correct Exception",true);
		} catch(Exception e) {
			assertTrue("Threw Incorrect Exception", false);
		}
	}

	/**
	 * Test correct passwords
	 * This test should not throw an exception
	 */
	@Test
	public void testIsValidPasswordSuccessful()
	{
		try {
			assertTrue(PasswordCheckerUtility.isValidPassword(two));
		} catch(Exception e) {
			assertTrue("Threw Exception",false);
		} 
	}

	/**
	 * Test the invalidPasswords method
	 * Check the results of the ArrayList of Strings returned by the validPasswords method
	 */
	@Test
	public void testInvalidPasswords() {
		ArrayList<String> password = new ArrayList<String>();
		password.add(two);
		password.add(one);
		password.add(three);
		password.add(four);
		password.add(five);
		password.add(six);
		password.add(seven);
		password.add(eight);
		assertTrue(PasswordCheckerUtility.getInvalidPasswords(password).get(0).equals("A The password must be at least 6 characters long"));
		assertTrue(PasswordCheckerUtility.getInvalidPasswords(password).get(5).equals("PPPPaul1@8 The password cannot contain more than two of the same character in sequence"));
	}

}
