import java.util.ArrayList;

/**
 * Utility class which helps to check the suitability of passwords
 *  @author Paul Abili
 */
public class PasswordCheckerUtility {
	/**
	 * Determines whether the password is equal to the confirm password
	 * @param password the string which is the basis of comparison 
	 * @param passwordConfirm the password which is being checked
	 * @throws UnmatchedException - Exception thrown when the passwords are not the same
	 */
	public static void comparePasswords(String password, String passwordConfirm) 
			throws UnmatchedException {
		if(!(comparePasswordsWithReturn(password,passwordConfirm))) {
			throw new UnmatchedException("Passwords do not match");
		}
	}
	/**
	 * Determines whether the password is equal to the confirm password
	 * @param password the string which is the basis of comparison 
	 * @param passwordConfirm the password which is being checked
	 * @return true if the passwords are the same false otherwise
	 */
	public static boolean comparePasswordsWithReturn(String password, String passwordConfirm) {
		return password.equals(passwordConfirm);
	}
	/**
	 * Determines whether the password is long enough 
	 * @param password the string which is being checked
	 * @return true if the password is at least 6 characters long false if otherwise
	 * @throws LengthException - Exception thrown when the length of the password is too short
	 */
	public static boolean isValidLength(String password) throws LengthException {
		if(password.length() < 6) {
			throw new LengthException("The password must be at least 6 characters long");
		} else {
			return true;
		}
	}

	/**
	 * Determines whether the password has an uppercase character 
	 * @param password the string which is being checked
	 * @return true if the password has an uppercase character false otherwise
	 * @throws NoUpperAlphaException - Exception thrown when there is no uppercase character
	 */
	public static boolean hasUpperAlpha(String password) throws NoUpperAlphaException {
		try {
			boolean indicator = false;
			for(char c : password.toCharArray()) {
				if(Character.isUpperCase(c) == true) {
					indicator = true;
				}
			}
			if(indicator == true) {
				return indicator;
			} else {
				throw new NoUpperAlphaException("The password must "
						+ "contain at least one uppercase alphabetic character");
			}
		} catch(NoUpperAlphaException e) {
			return false;
		}
	}
	/**
	 * Determines whether the password has a lowercase character 
	 * @param password the string which is being checked
	 * @return true if the password has a lowercase character false otherwise
	 * @throws NoLowerAlphaException - Exception thrown when there is no lowercase character
	 */
	public static boolean hasLowerAlpha(String password) throws NoLowerAlphaException {
		try {
			boolean indicator = false;
			for (char c : password.toCharArray()) {
				if (Character.isLowerCase(c) == true) {
					indicator = true;
				}
			}
			if(indicator == true) {
				return indicator;
			} else {
				throw new NoLowerAlphaException("The password must "
						+ "contain at least one lowercase alphabetic character");
			}
		} catch(NoLowerAlphaException e) {
			return false;
		}
	}
	/**
	 * Determines whether the password has a digit 
	 * @param password the string which is being checked
	 * @return true if the password has a digit false otherwise
	 * @throws NoDigitException - Exception thrown when there is no number which is a part of the string 
	 */
	public static boolean hasDigit(String password) throws NoDigitException {
		try {
			boolean indicator = false;
			for(int i = 0; i < password.length(); i++) {
				for (char c : password.toCharArray()) {
					if (Character.isDigit(c) == true) {
						indicator = true;
					}
				}
			}
			if(indicator == true) {
				return indicator;
			} else {
				throw new NoDigitException("The password must contain at least one digit");
			}
		} catch(NoDigitException e) {
			return false;
		}
	}
	/**
	 * Determines whether the password has a special character 
	 * @param password the string which is being checked
	 * @return true if the password has a special character false otherwise
	 * @throws NoSpecialCharacterException - Exception thrown when there are no special characters  
	 */
	public static boolean hasSpecialChar(String password) throws NoSpecialCharacterException {
		try {
			boolean indicator = false;
			for(int i = 0; i < password.length(); i++) {
				for (char c : password.toCharArray()) {
					if ((!(Character.isLetterOrDigit(c))) && (!(Character.isWhitespace(c)))) {
						indicator = true;
					}
				}
			}
			if(indicator == true) {
				return indicator;
			} else {
				throw new NoSpecialCharacterException("The password must contain at least one special character");
			}
		} catch(NoSpecialCharacterException e) {
			return false;
		}
	}
	/**
	 * Determines whether the password has too many of the same character in a row
	 * @param password the string which is being checked
	 * @return true if the password does not have three of the same char in a row has a digit false otherwise
	 * @throws InvalidSequenceException - Exception thrown when there are 3 of the same characters in a row for a password
	 */
	public static boolean NoSameCharInSequence(String password) throws InvalidSequenceException {
		try {
			boolean sequence = true;
			char a; char b;	char c;
			for(int i = 0; i < password.length() - 2; i++) {
				a = password.charAt(i);
				b = password.charAt(i + 1);
				c = password.charAt(i + 2);
				if(a == b && b == c) {
					sequence = false;
				}
			}
			if(sequence == false) {
				throw new InvalidSequenceException("The password cannot contain more than two of the same character in sequence.");
			} else {
				return true;
			}
		} catch(InvalidSequenceException e) {
			return false;
		}

	}
	/**
	 * Determines whether the password is valid
	 * @param password the string which is being checked
	 * @return true if the password is valid false otherwise
	 * @throws LengthException - Exception thrown when the length of the password is too short 
	 * @throws NoUpperAlphaException - Exception thrown when there is no uppercase character
	 * @throws NoLowerAlphaException - Exception thrown when there is no lowercase character
	 * @throws NoDigitException - Exception thrown when there is no number which is a part of the string 
	 * @throws NoSpecialCharacterException - Exception thrown when there are no special characters  
	 * @throws InvalidSequenceException - Exception thrown when there are 3 of the same characters in a row for a password
	 */
	public static boolean isValidPassword(String password) throws LengthException, 
	NoUpperAlphaException, NoLowerAlphaException, NoDigitException, NoSpecialCharacterException,
	InvalidSequenceException{
		if(!(isValidLength(password))) {
			throw new LengthException("The password must be at least 6 characters long");
		}
		if(!(hasUpperAlpha(password))) {
			throw new NoUpperAlphaException("The password must contain at least one uppercase alphabetic character");
		}
		if(!(hasLowerAlpha(password))) {
			throw new NoLowerAlphaException("The password must contain at least one lowercase alphabetic character");
		}
		if(!(hasDigit(password))) {
			throw new NoDigitException("The password must contain at least one digit");
		}
		if(!(hasSpecialChar(password))) {
			throw new NoSpecialCharacterException("The password must contain at least one special character");
		}
		if(!(NoSameCharInSequence(password))) {
			throw new InvalidSequenceException("The password cannot contain more than two of the same character in sequence");
		}
		return true;
	}
	/**
	 * Determines whether the password is betwen 6 and 9 characters
	 * @param password the string which is being checked
	 * @return true if the password is between 6 and 9 characters false otherwise
	 */
	public static boolean hasBetweenSixAndNineChars(String password) {
		if(isWeakPassword(password) != false) {
			return true;
		} else {
			return false;
		}
	}
	/**
	 * Determines whether the password is weak
	 * @param password the string which is being checked
	 * @return true if the password is between 6 and 9 characters false otherwise
	 * @throws WeakPasswordException - Exception thrown when the password is between 6 and 9 characters
	 */
	public static boolean isWeakPassword(String password) throws WeakPasswordException {
		if((!(password.length() >= 6)) && (!(password.length() <= 9))) {
			return false;
		} else{
			throw new WeakPasswordException("Password is OK but weak");	
		}
	}
	/**
	 * Determines whether the passwords in the list are valid 
	 * @param passwords the ArrayList which is being checked
	 * @return the ArrayList with the invalid passwords
	 */
	public static ArrayList<String> getInvalidPasswords(ArrayList<String> passwords) {
		ArrayList<String> invalidPasswords = new ArrayList<String>();
		for(int i = 0; i < passwords.size(); i++) {
			try {
				if(!(isValidPassword(passwords.get(i)))) {
					isValidPassword(passwords.get(i));
				}
			} catch(LengthException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password must be at least 6 characters long" );
			} catch(NoUpperAlphaException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password must contain at least one uppercase alphabetic character");
			} catch(NoLowerAlphaException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password must contain at least one lowercase alphabetic character");
			} catch(NoDigitException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password must contain at least one digit");
			} catch(NoSpecialCharacterException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password must contain at least one special character");
			} catch(InvalidSequenceException e) {
				invalidPasswords.add(passwords.get(i) + " " + "The password cannot contain more than two of the same character in sequence");
			}
		}
		return invalidPasswords;
	}

}
